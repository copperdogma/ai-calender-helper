---
description: 
globs: 
alwaysApply: true
---
# Project Reference

> ⚡ This document must remain succinct. Edit ruthlessly. No fluff.

## Project Structure
```
ai-calendar-helper/
├── app/                    # Next.js 13+ App Router
│   ├── api/               # API routes
│   │   ├── auth/         # Authentication endpoints
│   │   │   └── [...nextauth]/ # NextAuth.js configuration
│   │   ├── events/       # Calendar events endpoints
│   │   └── health/       # Health check endpoint
│   ├── globals.css       # Global styles with Tailwind imports
│   ├── layout.tsx         # Root layout
│   └── page.tsx          # Home page
├── components/            # Reusable components
│   ├── ui/               # Base UI components
│   │   ├── Button.tsx    # Button with variants
│   │   ├── Card.tsx      # Card with subcomponents
│   │   ├── DateTimePicker.tsx # Date/time selection
│   │   ├── Dialog.tsx    # Modal dialogs
│   │   ├── Input.tsx     # Form input
│   │   ├── Label.tsx     # Form label
│   │   ├── Menu.tsx      # Dropdown menus
│   │   ├── Snackbar.tsx  # Notifications
│   │   └── TextField.tsx  # Text input with MUI styling
│   ├── forms/            # Form components
│   └── layouts/          # Layout components
```

## Component Architecture

### UI Components
- Button: default/destructive/outline/secondary/ghost/link variants
- Card: Header/Title/Description/Content/Footer subcomponents
- DateTimePicker: Date and time selection with validation
- Dialog: Modal dialogs with customizable header/content/actions
- Input: default/outline/ghost variants, form integration
- Label: default/error/success variants, accessibility support
- Menu: Dropdown menus with optional icons
- Snackbar: Toast notifications with severity levels
- TextField: Material UI text input with custom styling

### Implementation Details
- All components use 'use client' directive
- TypeScript for type safety
- Tailwind CSS v4 for styling
- Material Design components with custom theming
- Proper ref forwarding
- Accessibility features
- Dark mode support via CSS variables

## Routes
- `/` - Dashboard
- `/api/events` - Calendar events CRUD operations
  - GET: Fetch events
  - POST: Create event
  - PUT: Update event
  - DELETE: Delete event
- `/api/auth/*` - NextAuth.js authentication endpoints
  - Handles Google OAuth flow
  - Manages session tokens
  - Scoped for calendar access

## CLI Commands

### Development
```bash
npm run dev         # Start dev server
npm run build      # Production build
npm run start      # Start production server
```

### Code Quality
```bash
npm run lint       # Check ESLint issues
npm run lint:fix   # Fix ESLint issues
npm run format     # Format with Prettier
npm test          # Run tests (TBD)
```

## Environment Variables
Required in `.env.local`:
```bash
# Firebase
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=

# Database
POSTGRES_URL=
REDIS_URL=

# Google Calendar
GOOGLE_CALENDAR_API_KEY=
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# NextAuth.js
NEXTAUTH_URL=
NEXTAUTH_SECRET=
```

## Tech Stack
- Next.js 15.2.2
- React 19
- TypeScript 5
- Tailwind CSS v4
  - PostCSS integration
  - Modern CSS imports
  - No configuration file needed
- Firebase Auth
- PostgreSQL
- Redis
- Material Design components

## Configuration Files
- `postcss.config.mjs` - PostCSS configuration with Tailwind CSS
- `next.config.ts` - Next.js configuration
- `tsconfig.json` - TypeScript settings
- `.env.example` - Environment variables template
- `.eslintrc.js` - ESLint rules
- `.prettierrc` - Code formatting

## CSS Architecture
```css
/* Global CSS Structure */
@import "tailwindcss";      // Import Tailwind's utility classes

:root {
  --background: #ffffff;    // Light mode variables
  --foreground: #171717;
}

@theme inline {             // Theme configuration
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {                  // Dark mode variables
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
```

## Error Handling
- Form validation errors
- API error responses
- Authentication errors
- Database connection issues

## Performance Optimizations
- Server components by default
- Client components marked explicitly
- Proper code splitting
- Redis caching layer
- Optimized images and assets

## Security Measures
- Environment variables
- API route protection
- CORS configuration
- Rate limiting
- Input sanitization

## API Reference

### Calendar Events API
```typescript
// GET /api/events
Response {
  events: CalendarEvent[]
}

// POST /api/events
Request {
  title: string
  description?: string
  start: Date
  end: Date
}
Response {
  event: CalendarEvent
}

// PUT /api/events
Request {
  id: string
  updates: Partial<CalendarEvent>
}
Response {
  event: CalendarEvent
}

// DELETE /api/events
Request {
  id: string
}
Response {
  success: boolean
}
```

### Authentication API
- Uses NextAuth.js with Google provider
- Scoped for calendar access
- Manages OAuth tokens automatically
- Session handling with JWT