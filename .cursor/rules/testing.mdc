---
description: 
globs: tests/**/*
alwaysApply: false
---
## Testing in AI Calendar Helper

# Testing Guide

This rule provides guidance on testing practices for the AI Calendar Helper application.

## Testing Overview

The project uses three main testing approaches:

1. **Unit Testing**: For individual components and functions (Jest + React Testing Library)
2. **API Testing**: For backend endpoints and services (Jest + Supertest)
3. **E2E Testing**: For complete user flows (Playwright)

## Running Tests

| Command | Description |
|---------|-------------|
| `npm test` | Run all unit and API tests |
| `npm test:watch` | Run tests in watch mode |
| `npm test:coverage` | Run tests with coverage report |
| `npm run test:e2e` | Run E2E tests with Playwright |
| `npm run test:e2e:ui` | Run E2E tests with UI mode |
| `npm run test:e2e:debug` | Run E2E tests with debugging |

## Directory Structure

```
## Directory Structure

```
/tests/                   # Centralized test directory
  /unit/                  # Unit tests for components and APIs
    /api/                 # API endpoint tests 
    /components/          # React component tests
  /integration/           # Integration tests
  /e2e/                   # Playwright E2E tests
    /auth/                # Authentication tests
    /fixtures/            # Test fixtures
    accessibility.spec.ts # Accessibility tests
    navigation.spec.ts    # Navigation tests
    performance.spec.ts   # Performance tests
  /mocks/                 # Shared test mocks
  /utils/                 # Shared test utilities
  /config/                # Test configurations
    /jest.config.js       # Jest configuration
    /playwright.config.ts # Playwright configuration
    /setup/               # Test setup files
```

## Unit Testing Patterns

### Testing React Components

```typescript
import { render, screen, fireEvent } from '../../utils/test-utils';
import Button from '../../../components/ui/Button';

test('button handles click', async () => {
  const handleClick = jest.fn();
  render(<Button onClick={handleClick}>Click me</Button>);
  await fireEvent.click(screen.getByRole('button'));
  expect(handleClick).toHaveBeenCalled();
});
```

### Testing Firebase Authentication

Firebase auth is mocked directly in test files:

```typescript
// Mock modules before imports
jest.mock('../../../lib/firebase', () => ({
    getAuth: jest.fn(() => ({
    currentUser: null
  })),
  signInWithPopup: jest.fn(),
  signOut: jest.fn()
}));

// Test with mocked Firebase
test('handles sign in', async () => {
  (signInWithPopup as jest.Mock).mockResolvedValueOnce({
    user: mockUser
  });
  await fireEvent.click(screen.getByTestId('sign-in-button'));
  expect(signInWithPopup).toHaveBeenCalled();
});
```

## API Testing Patterns

```typescript
import { NextRequest } from 'next/server';
import { GET } from '../../../app/api/events/route';

test('GET endpoint returns data', async () => {
  const req = new NextRequest(new Request('https://test.com/api/events'));
  const res = await GET(req);
  
  expect(res.status).toBe(200);
  const data = await res.json();
  expect(data).toHaveProperty('events');
});
```

## E2E Testing Patterns

### Authentication Testing

```typescript
test('authentication mock should work', async ({ page }) => {
  // Mock the Firebase auth response
  await page.evaluate(() => {
    const mockUser = {
      uid: 'test-uid-123',
      email: 'test@example.com',
      displayName: 'Test User'
    };
    
    // Store in localStorage to simulate auth state
    localStorage.setItem('firebase:authUser:test-project-id', JSON.stringify(mockUser));
    
    // Dispatch auth state change event
    window.dispatchEvent(new CustomEvent('authStateChanged'));
  });
});
```

### Accessibility Testing

```typescript
import { test, expect } from '@playwright/test';
import AxeBuilder from '@axe-core/playwright';

test('page should be accessible', async ({ page }) => {
  await page.goto('/');
  
  const accessibilityScanResults = await new AxeBuilder({ page })
    .withTags(['wcag2a', 'wcag2aa'])
    .analyze();
  
  expect(accessibilityScanResults.violations).toEqual([]);
});
```

### Cross-Browser Compatibility

For browser-specific features, implement feature detection:

```typescript
// Feature detection for CDP APIs
const memoryInfo = await client.send('Memory.getBrowserMemoryUsage')
  .catch(error => {
    console.log('Memory API not available, skipping test');
    return null;
  });

if (memoryInfo) {
  // Perform tests that require this API
}
```

## Best Practices

1. **Test Isolation**: Each test should be independent
2. **Stable Selectors**: Use data-testid attributes instead of text or CSS classes
3. **Mock External Services**: Mock API calls, Firebase, databases
4. **Clean Test Data**: Reset state between tests
5. **Feature Detection**: Use try/catch for browser-specific features

## Detailed Documentation

For more detailed documentation, refer to:

- [main.md](mdc:docs/testing/main.md): Main testing guide
- [e2e-testing.md](mdc:docs/testing/e2e-testing.md): End-to-end testing details
- [README-main.md](mdc:tests/README-main.md): Unit and API test implementation details
- [README-e2e.md](mdc:tests/e2e/README-e2e.md): E2E test implementation details 

